第二章、select语句
	select * from {table_name}; 查询某表全部内容。通配符 *。
	select {col_name1, col_name2...} from {table_name};多列查询。

/*--===============================--*/
/*--===============================--*/

第三章、 排序检索结果（order by子句）
	select {col_name1, col_name2...} 
	from {table_name}
	order by {col_name1}

	保证order by 子句是select语句中最后一条子句。

	允许使用未查询列排序。

	允许按多个列排序。

	相对位置排序：order by 2, 3;其中2,3是select清单中列名的序列。

	指定降序排列。desc关键字。order by prod_price desc;默认是升序排列（asc）。在多列排序是，desc直接应用到位于其前面的列名上。

/*--===============================--*/
/*--===============================--*/

第四章、 过滤数据（where子句）
	select {col_name...}
	from {talbe_name}
	where {colname = 3.49}

	where子句在表明（from子句）之后给出。

	where操作符：
		= 				等于
		<>				不等于
		!=				不等于
		<				小于
		<=				小于等于
		!<				不小于
		>				大于
		>=				大于等于
		!>				不大于
		between			在指定的两个值之间
		is null 		为null值。

	单引号用来限定字符串。

	between {a} and {b}检索值在a和b之间的行，数字、日期均可。日期要以字符串形式给出。

	空值检测 is null；

/*--===============================--*/
/*--===============================--*/

第五章、 高级数据过滤（and 、 or 、 in 、 not）
	过滤条件的 "并" 操作：and
	select * 
	from {table_name} 
	where {col_name1} < {value} and {col_name2} >= {value}

	过滤条件的 "或" 操作： or
	select *
	from {table_name}
	where {col_name1} < {value} or {col_name1} > {value};

	计算次序问题：优先处理and操作符。可加括号完成。

	指定操作范围操作符：in
		where {col_name} in ('{value1}', '{value2}')
	能完成与or操作相同的工作。但速度更快，语法更清晰，更易于管理，且能包含其他select语句。

	否定条件操作符：not
		有且只有一个功能，就是否定它之后的任何条件。
		where not {col_name} = {value};
		除了条件之外的所有行都被检索。

/*--===============================--*/
/*--===============================--*/

第六章、 用通配符进行过滤
	通配符（wildcard）：用来匹配值的一部分的特殊字符。只能用于文本字段（串）。
	搜索模式（search pattern）：有字面值、通配符或两者组合构成的搜索条件。字符串形式给出。

	like操作符（谓词）：
		用于在where子句中使用通配符。指示DBMS，后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较。

		%：任何字符出现任意次数。
			where {col_name} LIKE '{字面值}%';
			可匹配0个字符；且可以多次出现；可以匹配空格；

		_：任意单个字符。
			where {col_name} LIKE '__ {字面值}';
			总是匹配一个字符。

		[]：指定一个字符集，必须匹配指定位置（通配符位置）的一个字符。
			where {col_name} LIKE '[字符集]%';
			例：where cust_contact LIKE '[JM]%';
			查询cust_contact中以J或M开头的数据。并不是所有DBMS都支持，只为Micorsoft Access、Microsoft SQL Server 和 Sybase Adaptive Server所支持。

	注意：⑴不要过分使用通配符。⑵通配符速度较慢，避免使用在匹配模式开头。⑶小心仔细。

/*--===============================--*/
/*--===============================--*/

第七章、 创建计算字段。
	计算字段不实际存在于数据库表中。是运行时在select语句内创建的。

	拼接：将值联结到一起构成单个值。可用特殊的操作符来拼接两个列，可用加号（+）或两个竖杠（||）。Access、SQl Server和Sybase用加号，DB2、Oracle、PostgreSQl和Sybase用||。MySQL使用concat()函数，每个参就是拼接的内容。MySQL中||等同于or，&&等同于and。
		select concat({col_name1}, ' (', {col_name2}, ')');
	结果：col_name1 (col_name2);

	去空格操作：RTRIM()去掉右边空格，LTRIM()去掉左边空格，TRIM()去掉两边空格。

	查询结果只是一个值，客户机应用中不能引用它。为了解决这个问题，通过 “列别名”。 它是一个字段或值得替换名，用AS关键字赋予。
		select concat({col_name1}, ' (', {col_name2}, ')') as vend_title;

	算数计算字段：{col_name1} * {col_name2} as {new_col_name}
		支持+，-，*，/，四种基本运算。和小括号。

/*--===============================--*/
/*--===============================--*/

第八章、 使用数据处理函数
	SQL函数存在的问题：
		兼容性问题，同样的功能，在不同DBMS种有不同的实现方式和表示形式。

	常用且兼容的文本处理函数：
		left(str, len)				返回串左边的字符
		right(str, len)				返回串右边的字符
		length()（datalength()或len()） 返回串长度
		lower()（Access使用lcase()）将串转换为小写。
		ltrim()						去掉串左边的空格。
		rtrim()						去掉串右边的空格。
		soundex() 					返回串的soundex的值。
		upper()（Access使用ucase()）将串转换为大写。

	MySQL常用函数：substring(str, start, len)提取串的组成部分。convert()数据类型转换，curdate()提取当前日期。substring_index(str, char, 正负数)

	MySQL日期函数：
		curdate()	提取当前日期
		year({col_date}) 提取日期中的年份
		month({col_date}) 提取日期中的月份
		day({col_date}) 提取日期中的号数

	算数函数：
		abs() 			返回一个数的绝对值
		cos()			返回一个角度的余弦值
		exp()			返回一个数的指数值
		pi()			返回圆周率
		sin()			返回正弦值
		sqrt()			返回一个数的平方根
		tan()			返回一个角度的正切

/*--===============================--*/
/*--===============================--*/

第九章、 汇总数据
	聚集函数：运行在行组上，计算和返回单个值的函数。
	avg() 				返回某列的平均值
	count(*|column)		返回某列的行数
	max()				返回某列的最大值
	min()				返回某列的最小值
	sum()				返回某列的值之和

	max、min用于非数字列，返回最后，最前一条数据。

	聚集不同值。这几种聚集函数均可以加上distinct参数，修饰列名，表示只考虑各个不同值。

	一个select语句可以包含多个聚集函数。

/*--===============================--*/
/*--===============================--*/

第十章、 分组数据（group by 和 having）
	分组：允许把数据分为多个逻辑组，以便能对每个组进行聚集计算。

	group by 子句指示DBMS按{col_name}排序并分组数据。就使得是对每个vend_id组进行一次聚集运算。

	group by 子句必须出现在where子句之后，order by子句之前。

	与where类似用于过滤分组的having子句。语法与where相同，支持通配符、and、or、in、not。where在分组前进行过滤，having在分组后进行过滤。

	一般在使用group by子句时，应该也给出order by子句。这是保证数据正确排序的唯一方法。千万不要依赖group by排序数据。

	select子句的顺序：
		select 	要返回的列或表达式	必须
		from 	从中检索数据的表	从表选择数据时使用
		where 	行级过滤 			不必须
		group by分组说明			按组计算聚集时使用
		having 	组级过滤			不必须
		order by输出排序顺序		不必须

/*--===============================--*/
/*--===============================--*/

第十一章、 使用子查询
	先前使用的都是简单select语句，从单个数据库表中查询数据的单条语句。

	子查询：嵌套在其他查询语句中的查询。

	将一条select 语句的查询结果用于另一条select语句的where子句。

	作为子查询的select语句只能查询单个列。

	在可能混淆列名时应使用完全限定列名语法。orders.cust_id = customers.cust_id;

	例子：subquery.sql 和 com_subquery.sql;

/*--===============================--*/
/*--===============================--*/

第十二章、 联结表
	关系数据库存储数据不重复，修改只需一次改动，且数据一致使得处理简单。设计良好的数据库关系具有良好的可伸缩性。

	联结：一种在一句select语句中关联多个数据库表的机制。
	
	等值结联equi join也叫内部结联inner join：
	from {table_name1} INNER JOIN {talbe_name2}
	on {table_name1.col_name} = {table_name2.col_name}

	联结多个表，首先列出所有表，然后定义表之间的关系。

	结联的表越多性能下降的越厉害

/*--===============================--*/
/*--===============================--*/

第十三章、 创建高级结联
	表别名：缩短sql语句，方便多次使用相同表。
	from {talbe_name} as {new_name}
	where {new_name}.{col_name} = {value};

	Oracle中没有关键字AS，简单指定列名即可，比如：Customers C。

	表别名不返回到客户机，与列别名不一样。

	自结联：通常用作外部语句用来代替从相同表中 检索数据的使用子查询语句。
		select {c1.colname1}, {c1.colname2}
		from {table1} as {c1} INNER JOIN {table1} as {c2}
		on {c1.colname} = {c2.colname};
	自然结联：只能选择唯一列的结联形式。排除多次出现。

	外部结联：联结查询将一个表中的行与另一个表中的行相关联。若要那些没有关联起来的行就要拥戴外部联结。
		from {table1} OUTER(LEFT or RIGHT) JOIN {table2}
		简化的操作符：where子句中 
			*=：左外联结， 
			=*：右外联结（MySQL不支持）
		全外部联结：包含两个不同表的不关联行。（MySQL不支持）

	带聚集函数的结联：
		select {col_name}, count({talbe2.col_name})
		from {table1} INNER JOIN {table2}
		on {table1.col_name} = {talbe2.col_name}
		group by {table1.clo_name};

/*--===============================--*/
/*--===============================--*/

第十四章、 组合查询
	使用union操作符将多条select语句组合成一个结果集。

	union关键字：将多个select 语句结合起来，形成只有一个返回结果集的组合查询。

	union的限制：具体的DBMS有select 语句数目限制。

	union规则：
		1.union必须由两条或以上的select语句组成，语句之间用关键字union分隔。
		2.union中的每个查询必须包含相同的列、表达式或聚集函数
		3.列数据类型必须兼容

	union默认取消重复的行，若想返回所有匹配行可使用union all。

	union结果排序，使用order by子句，只能出现在最后一条select语句的最后。

/*--===============================--*/
/*--===============================--*/

第十五章、 插入数据（insert）
	插入可以用几种方式使用：
	1.插入完整的行
		insert into {table_name} (列序列)
		values (一组值)
		其中值和列顺序严格对应。

	2.插入部分行
		省略某些不必要的列。这些列要么允许为null，要么给出了默认值。

	3.插入检索出的数据
		insert into {talbe_name}(...) 
		select (...) from {table_name2}
		实现将table_name2表中所有数据插入到table_name表中。可以实现用单条insert语句插入多行。

	从一个表复制到另一个表（在运行过程中创建）：
		非MySQL或Oracle：
		select {col_name | *} into {new_talbe} 
		from {old_talbe};

		MySQL或Oracle：
		create talbe {new_talbe} as
		select {col_name | *}
		from {old_name};

/*--===============================--*/
/*--===============================--*/

第十六章、 更新和删除数据
	更新：
		update {table_name} set {col_name} = {value}
		由三部分组成：表、列名和新值、过滤条件。
		1.更新表中的特定行
			where {条件}
			在update中使用子查询。
		2.更新所有行
			不使用where过滤。
		3.删除指定列
			将其值改为null

	删除：
		delete from {table_name}
		1.删除特定行
			where {col_name} = {value};
		2.删除所有行
			不使用where语句。
		3.删除表中所有行
			truncate table {table_name}

	更新和删除的指导原则：
		1.不要使用不带where子句的update和delete子句。
		2.保证每个表都有主键。
		3.使用update或delect前先使用select语句，测试其正确性。
		4.使用枪支实施引用完整性的数据库。

/*--===============================--*/
/*--===============================--*/

第十七章、 创建和操纵表
	1.创建表：create table {talbe_name}(...)
		必须给出：
		·新表的名字，在关键字create table之后
		·表列的名字和定义，用逗号分隔
		·有的DBMS还要求指定表的位置

		只有非空的列可用于主键。

		指定默认值：(default关键字)
			quantity  INTEGER	NOT NULL	default 1,

	2.更新表：alter talbe
		需要考虑:
		·尽量不要在表中拥有数据时更新，尽量在设计阶段考虑未来的需求。
		·所有DBMS都允许增加列，不过对数据类型，null和default有限制。
		·许多DBMS不允许删除或更改表中的列。
		·多数DBMS允许重命名表中的列。
		·许多DBMS对已有数据的列限制，几乎不限制没有数据的列。

		a：删除列
		ALTER TABLE 【表名字】 DROP 【列名称】

		b：增加列
		ALTER TABLE 【表名字】 ADD 【列名称】 INT NOT NULL  COMMENT '注释说明'

		c：修改列的类型信息
		ALTER TABLE 【表名字】 CHANGE 【列名称】【新列名称（这里可以用和原来列同名即可）】 BIGINT NOT NULL  COMMENT '注释说明'

		d：重命名列
		ALTER TABLE 【表名字】 CHANGE 【列名称】【新列名称】 BIGINT NOT NULL  COMMENT '注释说明'

		e：重命名表
		ALTER TABLE 【表名字】 RENAME 【表新名字】

		f：删除表中主键
		Alter TABLE 【表名字】 drop primary key

		g：添加主键
		ALTER TABLE sj_resource_charges ADD CONSTRAINT PK_SJ_RESOURCE_CHARGES PRIMARY KEY (resid,resfromid)

		h: 添加外键
		alter table {表名} add constraint {约束名} foreign key ({列名}) reference {表名}({列名})

		i：添加索引
		ALTER TABLE sj_resource_charges add index INDEX_NAME (name);

		j: 添加唯一限制条件索引
		ALTER TABLE sj_resource_charges add unique emp_name2(cardnumber);

		k: 删除索引
		alter table tablename drop index emp_name;

	3.删除表
		drop table {table_name};

/*--===============================--*/
/*--===============================--*/

第十八章、 使用视图
	视图：是一个虚拟的表，不包含实际数据，只包含使用时动态检索数据的查询。

	在使用视图时，就是与使用表的语法一样。

	使用视图的原因：
		1.安全性，视图可以隐藏一些数据。
		2.简化用户操作。
		3.视图使用户以不同的方式看待同一数据。
		4.视图对重构数据库体统了一定程度的逻辑独立性。
		5.sql语句重用。

	创建视图：
		create [algorithm]={undefined|merge|temptable}
		VIEW {视图名}(属性清单)
		AS SELECT 语句
		[with [cascaded|local] check option];

		algorithm表示视图选择算法，with check option表示更新视图时要保证在该视图的权限范围内。

		在information_schema.views表中可以查看存在的视图。
		select查询视图，
		descirbe {view_name}查看视图基本信息
		show table status '{view_name}'查看视图。
		show create view '{view_name}'查看视图。

		修改视图：
			1.create or replace view {view_name}(...) as select ...。
			2.alter view {view_name}(...) as select ...。

		删除视图：
			drop view if exists {view_name};
			drop view {view_name};

		不要通过视图去更新数据库数据。

/*--===============================--*/
/*--===============================--*/

第十九章、 存储过程
	存储过程：就是为以后的使用而保存的一条或多条slq语句的集合。

	使用存储过程的原因：
		1.封装处理，简化复杂操作。（简单）
		2.处理步骤始终相同，保证了数据的一致性。
		3.简化了对变动的管理。（安全）
		4.以编译形式存储，提高了性能。（高效）

	语法：
		详见当前目录：mysql_syntax.txt。

/*--===============================--*/
/*--===============================--*/

第二十章、 管理事务处理(commit, rollback) 
	事务处理：用来维护数据库的完整性，它保证成批的sql操作要么完全执行，要么完全不执行。

	事务(transaction)：指一组sql语句。
	回退(rollback)：指撤销指定sql语句的过程。
	提交(commit)：指将未存储的sql语句结果写入数据库表。
	保留点(savepoint)：指事务处理中设置的临时占位符，可以对它发布回退。

	可以用来管理insert，update，delect语句。不能回退create、drop

	控制事务处理:
		start transaction
			...
		commit transaction

	ROLLBACK回退：
		delete from orders;
		rollback;

	使用保留点：
		创建：savepoint {savep_name};
		回滚：rollback to {savep_name};

	事务往往在存储过程中使用。

/*--===============================--*/
/*--===============================--*/

第二十一章、 游标
	结果集(result set):sql查询所检索出的结果。
	有时需要在检索出来的行中前进或后退一行或多行。这就要用到游标。

	游标：存储在DBMS服务器上的数据库查询，不是select语句，而是被该语句检索出来的结果集。

/*--===============================--*/
/*--===============================--*/

第二十二章、 高级sql特性（约束、索引、触发器）
	约束：管理如何插入或处理数据库数据的规则。
	1.主键————一种特殊的约束。
		order_num	INTEGER		NOT NULL 	PRIMARY KEY
	
	2.外键————表中的一个列。其值必须在另一个表的主键中列出
		cust_id  char(10)  NOTNULL  references Customers(cust_id);

	3.唯一约束————保证一个列或一组列中数据唯一。
		与主键区别：
			a：表可以包含多个唯一约束
			b：唯一约束列可包含null
			c：唯一约束列可修改或更新
			d：唯一月数列的值可重复使用
			e：不能用来定义外键
		使用unique在表定义中定义，也可以用单独的constraint定义。

	4.检查约束————保证一个列或一组列中的数据满足一组指定的条件。
		比如：检查最大最小值、指定范围、只允许特定值等。
		·quantity  int  notnull  check(quantity > 0)
		·alter table {table_name} add constraint check (gender LIKE '[MF]')


	索引：用来排序数据以加快所搜和排序操作的速度。是一种特殊的文件。
	可以在一个或多个列上定义索引。
		缺点：
		1.索引改善检索操作的性能，但降低输入、修改和删除操作的性能。因为要动态更新索引。
		2.索引数据要占用大量的存储空间。
		3.并非所有数据都适合索引。
		4.索引用于数据过滤和数据排序。

	索引分为聚集索引和非聚集索引
		聚集索引：按照数据存放的物理位置为顺序，提高多行检索速率。
		非聚集索引：对于单行检索很快。

	普通索引：
	创建：
	·create index {index_name} on {table}(col_name(len));
	·alter table {table} add index {index_name} on (col_name(len));
	·index {index_name} (title(len))

	删除索引：
		drop index {index_name} on {table_name}


	唯一索引：
	创建于普通索引类似，加上unique关键字。其索引列的值必须唯一，可有多个索引列。
	·create unique index .....
	·alter table {table} add unique ...
	·unique {index_name}(title(len))

	MySQL只对一下操作符才使用索引：<,<=,=,>,>=,between,in,以及某些时候的like(不以通配符%或_开头的情形)；


	触发器:
	触发器时一种特殊的存储过程，它在特定的数据库活动发生时自动执行。可以与特定表上的insert、update和delete操作相关联。

	触发器内的代码具有以下数据的访问权：
		1.insert操作中的所有新数据
		2.update操作中所有新数据和旧数据
		3.delete操作中删除的数据

	触发器可在特定操作执行前或之后执行。

	CREATE TRIGGER <触发器名称>  --触发器必须有名字，最多64个字符，可能后面会附有分隔符.它和MySQL中其他对象的命名方式基本相象.
	{ BEFORE | AFTER }  --触发器有执行的时间设置：可以设置为事件发生前或后。
	{ INSERT | UPDATE | DELETE }  --同样也能设定触发的事件：它们可以在执行insert、update或delete的过程中触发。
	ON <表名称>  --触发器是属于某一个表的:当在这个表上执行插入、 更新或删除操作的时候就导致触发器的激活. 我们不能给同一张表的同一个事件安排两个触发器。
	FOR EACH ROW  --触发器的执行间隔：FOR EACH ROW子句通知触发器 每隔一行执行一次动作，而不是对整个表执行一次。
	<触发器SQL语句>  --触发器包含所要触发的SQL语句：这里的语句可以是任何合法的语句， 包括复合语句，但是这里的语句受的限制和函数的一样。

	DROP TRIGGER IF EXISTS t_afterdelete_on_tab1;
	CREATE TRIGGER t_afterdelete_on_tab1
	AFTER DELETE ON tab1
	FOR EACH ROW
	BEGIN
	      delete from tab2 where tab2_id=old.tab1_id;
	END;